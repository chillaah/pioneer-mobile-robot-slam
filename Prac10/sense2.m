function Z = sense2(I)

image1 = I;
image2 = I;
image3 = I; 

    red_bw = red_createMask(image1);
    red_bw=medfilt2(red_bw);
       
   % figure(1); imshow(image1);
   % figure(2); imshow(red_bw);
    
    yellow_bw = yellow_createMask(image2);
    yellow_bw=medfilt2(yellow_bw);
    
     %   figure(3); imshow(image2);
   % figure(4); imshow(yellow_bw);
    
    blue_bw = blue_createMask(image3);
       blue_bw=medfilt2(blue_bw);
       
   %            figure(3); imshow(image2);
  %  figure(4); imshow(yellow_bw);
    clean_red = bwareaopen(red_bw, 25);
    clean_blue = bwareaopen(blue_bw, 25);
    clean_yellow = bwareaopen(yellow_bw, 25);

    SE = strel('rectangle', [5, 10]);
    clean_red = imclose(clean_red, SE);
    clean_blue = imclose(clean_blue, SE);
    clean_yellow = imclose(clean_yellow, SE);
    
 %    figure(7); imshow(clean_red);
 %     figure(8); imshow(clean_blue);
 %figure(9); imshow(clean_yellow);
 
    red_blob = bwlabel(clean_red);
    Red_centroid = regionprops(red_blob,'centroid','BoundingBox');
    red_centroid = length(Red_centroid);
  
    blue_blob = bwlabel(clean_blue);
    Blue_centroid = regionprops(blue_blob,'centroid','BoundingBox');
    blue_centroid = length(Blue_centroid);
   
    yellow_blob = bwlabel(clean_yellow);
    Yellow_centroid = regionprops(yellow_blob,'centroid','BoundingBox');
    yellow_centroid = length(Yellow_centroid);

%   centroidLocations1 = ones(length(Blue_centroid), 2)*-1;
%   centroidLocations2(1, 1:2) = Blue_centroid(1).Centroid;
%   centroidLocations2(1, 3:4) = Blue_centroid(1).Centroid;
%   beaconBearing
%   cent1 = centroidLocations2(1);
%   cent2 = centroidLocations2(3);
%   xLoc = (centroidLocations2(1) + centroidLocations2(3)) / 2;
%   
 YELLOW = '11';
  BLUE = '10';
  RED = '01';
  
boxs_highet = [];
        
    yellow_y = [];
    blue_y = [];
    red_y = [];
    Z = [];
    final_value = [];
    count = 0;

if ((red_centroid >= 1) && (blue_centroid >= 1) && (yellow_centroid >= 1))
    count = 1;
end
if ((red_centroid >= 2) && (blue_centroid >= 2) && (yellow_centroid >= 2))
    count = 2;
end
if ((red_centroid >= 3) && (blue_centroid >= 3) && (yellow_centroid >= 3))
    count = 3;
end

   for r = 1:count
   
    red_centroid;
    blue_centroid;
    yellow_centroid;
    
   boxs_highet = Red_centroid(r).BoundingBox(4) + Yellow_centroid(r).BoundingBox(4) + Blue_centroid(r).BoundingBox(4);
    object_range = range(boxs_highet);
    
    
    x_location = [Yellow_centroid(r).Centroid(1); Red_centroid(r).Centroid(1);Blue_centroid(r).Centroid(1)];
    centroid = (max(x_location) + min(x_location))/2;
    
    centroid;
    bearing1 = bearing(centroid);
    
   if ((Yellow_centroid(r).Centroid(2) < Blue_centroid(r).Centroid(2)) && (Red_centroid(r).Centroid(2) > Blue_centroid(r).Centroid(2)))

       Z = 27;
   elseif ((Red_centroid(r).Centroid(2) < Blue_centroid(r).Centroid(2)) && (Yellow_centroid(r).Centroid(2) > Blue_centroid(r).Centroid(2)))  
    
      Z = 57;
        
   elseif ((Red_centroid(r).Centroid(2) < Yellow_centroid(r).Centroid(2)) && (Blue_centroid(r).Centroid(2) > Yellow_centroid(r).Centroid(2)))  
%         binaryCode = append(BLUE,YELLOW)   
%         binaryCode = append(binaryCode,RED)
      Z = 45;        
   elseif ((Blue_centroid(r).Centroid(2) < Yellow_centroid(r).Centroid(2)) && (Red_centroid(r).Centroid(2) > Yellow_centroid(r).Centroid(2)))   
         Z = 30;
      elseif ((Yellow_centroid(r).Centroid(2) < Red_centroid(r).Centroid(2)) && (Blue_centroid(r).Centroid(2) > Red_centroid(r).Centroid(2)))  
         Z = 39;
   end 
      final_value(end+1,:) = [Z object_range bearing1];
   end 
Z = final_value;


function [BW,maskedRGBImage] = yellow_createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 30-Apr-2021
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.129;
channel1Max = 0.248;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.388;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end

function [BW,maskedRGBImage] = red_createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 30-Apr-2021
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.939;
channel1Max = 0.024;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.215;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 0.735;

% Create mask based on chosen histogram thresholds
sliderBW = ( (I(:,:,1) >= channel1Min) | (I(:,:,1) <= channel1Max) ) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end


function [BW,maskedRGBImage] = blue_createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for eafch channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 30-Apr-2021
%------------------------------------------------------


% Convert RGB image to chosen color space
I = rgb2hsv(RGB);

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.538;
channel1Max = 0.711;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.399;
channel2Max = 1.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.245;
channel3Max = 1.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end


end

function P = bearing(centroid) 
    Angle_of_view =  62.2; 
     value = (320 / 2);
     centroid;
    P = ((((320 / 2)-centroid)*(Angle_of_view/2)) /value);
end
function distance = range(hight)   
Angle_of_view = 62.2;
Focal_length = 3.8;
Camera_sensor_height = 2.74;  
Beacon_colour_band_height = 150;

image_height = 240;
distance = ((image_height*Beacon_colour_band_height*Focal_length) / (hight * Camera_sensor_height));
distance = distance/1000;
end